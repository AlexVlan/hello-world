#Bash
which programm                                                посмотреть где программа 
which bash > 1.txt                                            можно положить инфу в файл
sh                                                            запустить оболочку sh
my_script.sh                                                  скрипт sh
##Пример простого скрипта

#!/bin/bash                                                  путь до оболочки которая будет выполнять скрипт
echo "Hello, world!"                                          вывод

chmod +x my_script.sh                                         сделать исполняемым
./my_script.sh                                                запуск

bash my_script.sh                                             запуск без добавления ключа исполняемости
                                #переменные
имя                                                           буквы,цифры, _     не может начинаться с цифры
значение                                                      числа, строки(если есть пробелы то в кавычках) отд символы
имя=значение
path=~/Docs       
                                  #Чтение
$имя или ${имя}
path2=$path/file1.txt                                         записать в переменную другую пер
echo “Path is $path2”                                         дописать вначале переменной текст"для текста"
echo “Path is ${path}2”                                       если нужно разделить переменную и букву
                                #комментарии
"$var"                                                        воспринимаются как переменная
'$var'                                                        воспринимается как текст
"/$var"                                                       воспринимаются как текст(/ломает переменную)
                                ##Аргументы
Передача аргументов скрипту:
./script.sh arg1 arg2 arg3 ...                              передаем свои значения
Обработка внутри скрипта:
$1 первый аргумент
$2 второй аргумент
….
$0 имя скрипта
$# количество аргументов
var=”Первый аргумент равен $1”
echo ”Всего было передано $# аргументов” 
var=$1                                                    передать переменной значение первого аргумента
если аргумент не задан но заявлен, то переменная будет с пустым значением
exit 0                                                    выход из скрипта
                            #Ветвление
if [[ условие ]]                                          Синтаксис
then
 # действия, если условие истинно
fi

Условия (строки):
-z <строка> # строка пуста
-n <строка> # строка не пуста
<стр1> == <стр2> # строки равны
<стр1> != <стр2> # строки не равны

Пример:
if [[ -z $1 ]]
then
 echo “Первый аргумент пустой!”
fi
if [[ $var1 == $var2 ]]
then
 echo “Переменные равны!”
fi

Условия [числа (строки)]:
 <число/строка> операция <число/строка>
-eq == # равно
-ne != # не равно
-lt < # меньше
-le # меньше или равно
-gt > # больше
-ge # больше или равно
операции вида “-хх” – только для чисел!
операции-знаки – только для строк!

Условия (файлы):
-e <путь> # путь существует
-f <путь> # это файл
-d <путь> # это директория
-s <путь> # размер файла больше 0
-x <путь> # файл исполняемый
Условия (логические):
! # отрицание логического выражения
&& # логическое «И»
|| # логическое «ИЛИ»

                                          #Ветвление: альтернативы
Синтаксис:
if [[ условие ]]
then
 # действия, если условие истинно
еlse
# действия, если условие ложно
fi

                                          #Ветвление: альтернативы
Синтаксис:
if [[ условие1 ]]
then
 # действия, если условие1 истинно
elif [[ условие2 ]]
then
# действия, если условие1 ложно,
# но условие2 истинно
еlse
 # действия, если оба условия ложны
fi

                                          #Ветвление: альтернативы
Синтаксис:
case переменная in
знач1)
 # действия, если переменная==знач1
 ;;
знач2)
# действия, если переменная==знач2
 ;;
*)
# действия, если переменная
# не равна ни одному из вариантов
esac

                                  #Циклы
Синтаксис:
for переменная in список_значений
do
 # действия, каждый раз переменная
 # принимает следующее значение
 # из списка
done
break прервать выполнение
сontinue перейти на след. значение

Синтаксис:
while [[ условие ]]
do
 # действия, пока условие истинно
done

Синтаксис:
while [[ условие ]]
do
 # действия, пока условие истинно
done
read переменная                                ввод переменной от пользователя
записать введенное пользователем
значение в переменную
                                         
                                            Арифметика
Арифметика
Синтаксис:
let “переменная = выражение”
Пример:
let “c = 1 + 1”
let “c = a + b”
Операции:
+, -, /, * стандартные
% остаток от деления
** возведение в степень               
Cокращение:
let “a=a+b” эквивалентно let “a+=b”
let "a=$a+$b"- Так тоже работает

##Так можно слепить значения a+=\$$b   a=7 b=7   a=77

                                #Внешние программы
Внешние программы
Синтаксис:
переменная=`программа`
Пример:a=`echo “test”`
files=`ls ~`

Код возврата:
0 корректное завершение
не 0 в процессе работы были ошибки
Узнать код:
$?
Выйти с кодом:
exit код
Пример:
touch file.txt
echo $?

Проверка кода возврата:
if `
программа`
then
# действия, если код 0
еlse
# действия, если код не 0
fi
                                            вывести ls для etc
cd /etc                                                  
a='ls' 
$a
